From d5064b7dc2fe9e875409fc25a1eb819d2285d508 Mon Sep 17 00:00:00 2001
From: Richard Hughes <richard@hughsie.com>
Date: Sun, 14 May 2023 19:34:28 +0100
Subject: [PATCH] Ignore the immutable flatpak fwupd.conf file permissions

Fixes https://github.com/fwupd/fwupd/issues/5817
---
 libfwupdplugin/fu-config.c | 58 +++++++++++++++++++++-----------------
 1 file changed, 32 insertions(+), 26 deletions(-)

diff --git a/libfwupdplugin/fu-config.c b/libfwupdplugin/fu-config.c
index 9a18090be..f9c9e5fc1 100644
--- a/libfwupdplugin/fu-config.c
+++ b/libfwupdplugin/fu-config.c
@@ -101,35 +101,41 @@ fu_config_reload(FuConfig *self, GError **error)
 				   "uefi_capsule.conf",
 				   NULL};
 
-	/* ensure the config files are set to the correct permissions */
+	/* ensure mutable config files are set to the correct permissions */
 	for (guint i = 0; i < priv->filenames->len; i++) {
 		const gchar *fn = g_ptr_array_index(priv->filenames, i);
-		if (g_file_test(fn, G_FILE_TEST_EXISTS)) {
-			GStatBuf st = {0x0};
-			gint rc = g_stat(fn, &st);
-			if (rc != 0) {
-				g_set_error(error,
-					    G_IO_ERROR,
-					    G_IO_ERROR_FAILED,
-					    "failed to get permission of %s",
-					    fn);
-				return FALSE;
-			}
-			st.st_mode &= 0777;
-			if (st.st_mode != FU_CONFIG_FILE_MODE_SECURE) {
-				g_info("mode was 0%o, and needs to be 0%o",
-				       st.st_mode,
-				       (guint)FU_CONFIG_FILE_MODE_SECURE);
-				rc = g_chmod(fn, FU_CONFIG_FILE_MODE_SECURE);
-				if (rc != 0) {
-					g_set_error(error,
-						    G_IO_ERROR,
-						    G_IO_ERROR_FAILED,
-						    "failed to change permission of %s",
-						    fn);
-					return FALSE;
-				}
+		const guint32 st_mode_target = FU_CONFIG_FILE_MODE_SECURE;
+		guint32 st_mode;
+		g_autoptr(GFile) file = g_file_new_for_path(fn);
+		g_autoptr(GFileInfo) info = NULL;
+
+		/* check permissions */
+		if (!g_file_query_exists(file, NULL))
+			continue;
+		info = g_file_query_info(file,
+					 G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE
+					 "," G_FILE_ATTRIBUTE_UNIX_MODE,
+					 G_FILE_QUERY_INFO_NONE,
+					 NULL,
+					 error);
+		if (info == NULL)
+			return FALSE;
+		st_mode = g_file_info_get_attribute_uint32(info, G_FILE_ATTRIBUTE_UNIX_MODE) & 0777;
+		if (st_mode != st_mode_target) {
+			if (!g_file_info_get_attribute_boolean(info,
+							       G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE)) {
+				g_debug("ignoring immutable %s", fn);
+				continue;
 			}
+			g_info("fixing %s from mode 0%o to 0%o", fn, st_mode, st_mode_target);
+			if (!g_file_set_attribute(file,
+						  G_FILE_ATTRIBUTE_UNIX_MODE,
+						  G_FILE_ATTRIBUTE_TYPE_UINT32,
+						  (gpointer)&st_mode_target,
+						  G_FILE_QUERY_INFO_NONE,
+						  NULL,
+						  error))
+				return FALSE;
 		}
 	}
 
-- 
2.40.1

